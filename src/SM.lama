-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, sigma, world], insns) {
  case insns of
    {} -> c
  | (BINOP (op)) : new_insts -> 
    case stack of y : (x : tail) -> eval([evalBinop(op, x, y) : tail, sigma, world], new_insts) esac
  | (CONST (n)) : new_insts -> eval([n : stack, sigma, world], new_insts)
  | READ : new_insts -> 
    case readWorld(world) of [num, new_world] -> eval([num : stack, sigma, new_world], new_insts) esac
  | WRITE : new_insts -> 
    case stack of x : tail -> eval([tail, sigma, writeWorld(x, world)], new_insts) esac
  | (LD (x)) : new_insts -> eval([sigma(x): stack, sigma, world], new_insts)
  | (ST (x)) : new_insts -> 
    case stack of y : tail -> eval([tail, sigma <- [x, y], world], new_insts) esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of
    Var (x) -> { LD (x) }
  | Const (n) -> { CONST (n) }
  | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ { BINOP (op) }
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Skip -> {}
  | Assn (name, expr) -> compileExpr(expr) +++ { ST (name) }
  | Seq (s1, s2) -> compileSM(s1) +++ compileSM(s2)
  | Read (name) -> { READ } +++ { ST (name) }
  | Write (expr) -> compileExpr(expr) +++ { WRITE }
  esac
}