-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun eval (c@[s, w], expr) {
  -- printf("%s\n\n", expr.string);
  -- printf("%s\n\n", s.string);
  case expr of
    Assn (e1, e2) -> 
      case eval(c, e1) of
        [c, Ref (x)] -> 
          case eval(c, e2) of
            [[s, w], v] -> [[s <- [x, v], w], v]
          esac
      esac 
  | Seq (e1, e2) -> 
      case eval(c, e1) of
        [c, _] -> eval(c, e2)
      esac
  | Skip -> [c, VOID]
  | Read (x) ->
      case readWorld(w) of
        [value, new_w] -> [[s <- [x, value], new_w], VOID]
      esac
  | Write (expr) -> 
      case eval(c, expr) of
        [[s, w], res] -> [[s, writeWorld(res, w)], VOID]
      esac
  | If (expr, s1, s2) ->
      case eval(c, expr) of
        [c, 0] -> eval(c, s2)
      | [c, _] -> eval(c, s1)
      esac
  | While (expr, body) ->
      case eval(c, expr) of
        [c, 0] -> [c, VOID]
      | [c, _] -> 
          case eval(c, body) of
            [c, _] -> eval(c, While (expr, body))
          esac
      esac
  | DoWhile (body, expr) ->
      case eval(c, body) of
        [c, _] -> eval(c, While (expr, body))
      esac
  | Var (x) -> [c, s(x)]
  | Ref (x) -> [c, Ref (x)]
  | Const (n) -> [c, n]
  | Binop (op, l, r) -> 
      case eval(c, l) of
        [c, vall] -> 
          case eval(c, r) of
            [c, valr] -> [c, evalOp(op, vall, valr)]
          esac
      esac
  | Ignore (expr) -> 
    case eval(c, expr) of
      [c, _] -> [c, VOID]
    esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
